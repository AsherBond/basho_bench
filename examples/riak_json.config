{mode, max}.

{duration, 60}.

{concurrent, 12}.

{driver, basho_bench_driver_http}.



%% Default generators, reference by the atoms key_generator and value_generator
{key_generator, {int_to_str, {uniform_int, 1000000}}}.
%% {key_generator, {int_to_str, {partitioned_sequential_int, 1000000}}}.
%%{key_generator, {int_to_str, {int_to_bin_bigendian, {uniform_int, 1000000}}}}.
%% {value_generator, {fixed_bin, 10000}}.

%%% Generators: {Name, KeyGen | ValGen}
% Name: atom()
% KeyGen: User or Basho Bench defined key generator
% ValGen: User or Basho Bench defined value generator
{generators, [
			  {json_value_g, {custom_value_generator, 
              	{basho_bench_valgen_json, new},
              	[{field_count, 10}, {field_type, "integer"}, 
              	 {keygenspec, {partitioned_sequential_int, 1000000}}]}},
              % {json_fixed_value_g, {custom_value_generator, 
              %	{basho_bench_valgen_json, new_fixed_schema},
              %	[{schema_location, "/tmp/bb_schema.json"}, 
              %	 {keygenspec, {partitioned_sequential_int, 1000000}}]}},

              % {json_index_query_g, {custom_value_generator,
              % 	{basho_bench_querygen_json, new_index_query},
              % 	[{field, "age"}, {keygenspec, {uniform_int, 1000000}}]}},
              {json_random_index_query_g, {custom_value_generator,
              	{basho_bench_querygen_json, new_random_index_query},
              	[{field_count, 10}, {field_type, "integer"}, 
              	 {keygenspec, {uniform_int, 1000000}}]}}

              % {json_range_query_g, {custom_value_generator,
              % 	{basho_bench_querygen_json, new_range_query},
              % 	[{field, "age"}, {range_length, 10},
              % 	 {keygenspec, {uniform_int, 1000000}}]}},
              % {json_random_range_query_g, {custom_value_generator,
              % 	{basho_bench_querygen_json, new_random_range_query},
              % 	[{field_count, 10}, {field_type, "integer"}, 
              % 	 {range_length, 10}, {keygenspec, {uniform_int, 1000000}}]}}
             ]}.

%%% Values: {Name, Value}
%%%         {Name, {FormattedValue, Generators}}
% Name: atom()
% Value: string() | atom() - named generator, can be key_generator or value_generator for default
% FormattedValue: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{values, [
		  {document_v, json_value_g},
		  % {index_query_v, json_index_query_g},
		  {index_query_random_v, json_random_index_query_g},
		  % {range_query_v, json_range_query_g},
		  {range_query_random_v, json_random_range_query_g}
		  % ,
          % {json_v, {"{\"this\":\"is_json_~s\"}", [string_g]}},
          % {xml_v, {"<?xml version=\"1.0\"?><catalog><book><author>~s</author></book></% catalog>", [binstring_g]}},
          % {plainstring_v, "hello"},
          % {smallbin_v, binstring_g},
          % {largebin_v, value_generator}
         ]}.

%%% Headers: {Name, Headers}
% Name: atom()
% Headers: proplist()
{headers, [
           {json_h, [{"Content-Type", "application/json"}, {"Accept", "application/json"}]}
          ]}.

%%% Targets: {Name, {Host, Port, Path}}
%%%          {Name, {Host, Port, {FormattedPath, Generators}}}
% Name: atom()
% Host: string()
% Port: integer()
% Path: string()
% FormattedPath: string() - formatted with io_lib:format
% Generators: list() - list of generators, can be key_generator or value_generator for default
{targets, [
		   {value_put_t, {"localhost", 8098, {"/document/collection/test_collection/~s", [
		   		key_generator]}}},
		   {value_get_t, {"localhost", 8098, {"/document/collection/test_collection/~s", [
		    	key_generator]}}},	
		   {query_put_t, {"localhost", 8098, "/document/collection/test_collection/query/all"}}
          ]}.

%%% Operations: {{get|delete, Target}, Weight}
%%%             {{get|delete, Target, Header}, Weight}
%%%             {{put|post, Target, Value}, Weight}
%%%             {{put|post, Target, Value, Header}, Weight}
% Target: atom() - defined target
% Header: atom() - defined header
% Value: atom() - defined value
% Weight: integer() - ratio of this operation to the rest (ThisWeight / TotalWeightSum = % of this Operation)

{operations, [
              %% Riak JSON get json object by key
              %% {{get, value_get_t, json_h}, 1}
              %% ,
              %% Riak JSON put a json object
              %% {{put, value_put_t, document_v, json_h}, 1}
              %% ,
              %% Riak JSON get a json object by index value
              {{put, query_put_t, index_query_random_v, json_h}, 1}
              %% ,
              %% Riak JSON get a json object by range value
              %% {{put, query_put_t, range_query_random_v, json_h}, 1}
             ]}.
